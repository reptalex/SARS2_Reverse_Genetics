{
    "collab_server" : "",
    "contents" : "library(rentrez)\nlibrary(magrittr)\nlibrary(data.table)\nlibrary(parallel)\n\n#ATG\n#TAG TAA TGA\nnearest_orf <- function(x,Strt,Stp,spike_min_length=3e3){\n  strts=gregexpr('ATG',x)[[1]] %>% sort\n  stps=c(gregexpr('TAG',x)[[1]],\n         gregexpr('TAA',x)[[1]],\n         gregexpr('TGA',x)[[1]]) %>% sort\n  \n  orfs <- expand.grid('a'=strts,'b'=stps) %>% as.data.table\n  orfs <- orfs[b>a]\n  orfs[,len:=b-a]\n  orfs <- orfs[len>spike_min_length]\n  orfs <- orfs[mod(len,3)==0]\n\n  orfs[,start_err:=abs(Strt-a)]\n  orfs[,stop_err:=abs(Stp-b)]\n  orfs[,tot_err:=start_err+stop_err]\n  \n  orfs=orfs[which.min(tot_err)]\n  \n  return(c('start'=orfs$a[1],'stop'=orfs$b[1]))\n}\n\nreferenceSeqs <- function(db='gene',gene='S',retmax=200){\n  ss <- entrez_search('gene',term=paste('(Coronaviridae[ORGN]) AND (',gene,'[GENE])',sep=''),\n                      retmax=retmax)\n  gg <- entrez_fetch('gene',id=ss$ids,rettype = 'fasta') %>% strsplit('\\n')\n  gg <- gg[[1]]\n  annotations <- gg[grepl('Annotation',gg)]\n  species <- gg[grepl('\\\\[',gg) & grepl('\\\\]',gg)]\n  species <- substr(species,regexpr('\\\\[',species),regexpr('\\\\]',species))\n  \n  species <- gsub('\\\\[','',species) %>% gsub('\\\\]','',.) %>% gsub('coronavirus','CoV',.)\n  \n  accn <- strsplit(annotations,' ') %>% sapply(getElement,3)\n  strtstp <- strsplit(annotations,' ') %>% sapply(getElement,4) %>%\n    sapply(FUN=function(s) substr(s,2,nchar(s)-1)) %>%\n    sapply(FUN=function(s) strsplit(s,'\\\\.\\\\.'))\n  starts <- as.numeric(sapply(strtstp,getElement,1))\n  stops <- as.numeric(sapply(strtstp,getElement,2))\n  \n  refSeqs <- data.frame('Species'=species,'Accession'=accn,\n                        'start'=starts,'stop'=stops,'seq'='',stringsAsFactors = F)\n  for (i in 1:length(species)){\n    ss <- entrez_search('gene',term=paste('(',accn[i],'[ACCN])',sep=''))\n    gg <- entrez_fetch('gene',id=ss$ids,rettype = 'fasta')\n    refSeqs$seq[i] <- substr(gg,regexpr('\\n',gg),nchar(gg)) %>% gsub('\\n','',x=.) %>% substr(starts[i]-1,stops[i]+1)\n  }\n  return(refSeqs)\n}\n\ncov_digestion <- function(accn,enzymes=c('BsaI','BsmBI'),tip=NULL){\n\n  data(\"RESTRICTION_ENZYMES\")\n  res=sapply(enzymes,FUN=function(r,x) r[x],r=RESTRICTION_ENZYMES)\n  \n  filepath=paste0('data/fasta_files/genome_accn_',accn,'[accn].fasta')\n  SEQ=read.FASTA(filepath) %>%\n    as.character %>% lapply(.,paste0,collapse=\"\") %>% unlist %>% DNAStringSet\n  \n  d_both=DigestDNA(res,\n                   SEQ,\n                   type='fragments',\n                   strand='top')\n  dd=unlist(d_both)\n  \n  dum=data.table('tip.label'=tip,'accession'=accn,\n                 'fragment_lengths'=dd@ranges@width,\n                 'Restriction_Enzyme'=paste(res,collapse=' + '),\n                 'genome_length'=nchar(SEQ))\n  return(dum)\n}\n### these are used for SEQ from muscle alignment\nbsai_sites <- function(SEQ,Virus='a'){\n  rbind(data.table('Virus'=Virus,\"position\"=gregexpr('GAGACC',SEQ)[[1]],'enzyme'='BsaI'),\n        data.table('Virus'=Virus,\"position\"=gregexpr('GGTCTC',SEQ)[[1]],'enzyme'='BsaI'))[position>0] %>% return()\n}\nbsmbi_sites <- function(SEQ,Virus='a'){\n  rbind(data.table('Virus'=Virus,\"position\"=gregexpr('GAGACG',SEQ)[[1]],'enzyme'='BsmBI'),\n        data.table('Virus'=Virus,\"position\"=gregexpr('CGTCTC',SEQ)[[1]],'enzyme'='BsmBI'))[position>0] %>% return()\n}\n##\noverhangs <- function(Seq,position) as.character(substr(Seq,position-5,position-2))\n\n\ndigest_genome <- function(accn=NULL,enzymes=c('BsaI','BsmBI'),\n                          fragments=TRUE,max_fragment=TRUE,SEQ=NULL){\n  \n  data(\"RESTRICTION_ENZYMES\")\n  res=sapply(enzymes,FUN=function(r,x) r[x],r=RESTRICTION_ENZYMES)\n  \n  filepath=paste0('data/fasta_files/genome_accn_',accn,'[accn].fasta')\n  if (is.null(SEQ)){\n    SEQ=read.FASTA(filepath) %>%\n      as.character %>% lapply(.,paste0,collapse=\"\") %>% unlist %>% DNAStringSet\n  }\n  \n  if (fragments){\n    d_both=DigestDNA(res,\n                     SEQ,\n                     type='fragments',\n                     strand='top')\n    dd=unlist(d_both)\n    \n    dum=data.table('Accession'=accn,\n                   'fragment_lengths'=dd@ranges@width,\n                   'Restriction_Enzyme'=paste(enzymes,collapse=' + '),\n                   'genome_length'=nchar(SEQ))\n    if (max_fragment){\n      dum <- dum[,list(Accession=accn[1],\n                       max_fragment_length=max(fragment_lengths),\n                       no_fragments=.N,\n                       Restriction_Enzyme=Restriction_Enzyme[1],\n                       genome_length=genome_length[1])]\n    }\n  } else {\n    d_both=DigestDNA(res,\n                     SEQ,\n                     type = 'positions',\n                     strand='top')\n    \n    dum=data.table('Accession'=accn,\n                   'position'=unlist(d_both),\n                   'Restriction_Enzyme'=paste(enzymes,collapse=' + '),\n                   'genome_length'=nchar(SEQ))\n  }\n  return(dum)\n}\ngg_color_hue <- function(n) {\n  hues = seq(15, 375, length = n + 1)\n  hcl(h = hues, l = 65, c = 100)[1:n]\n}\n\nget_genome <- function(accn){\n  accs <- rentrez::entrez_search('nucleotide',\n                                 term=accn)\n  if (length(accs$ids)!=0){\n    rentrez::entrez_search('genome',\n                           term=accn)\n    genome=entrez_fetch(db=\"nucleotide\", id=accs$ids, rettype=\"fasta\")\n    write(genome,file=paste0('data/fasta_files/genome_accn_',accn,'.fasta'))\n    genome <-read.FASTA(paste0('data/fasta_files/genome_accn_',accn,'.fasta')) %>%\n      as.character %>% lapply(.,paste0,collapse=\"\") %>% unlist %>% DNAStringSet\n  } else {\n    genome=NULL\n    warning(paste0('Accession ',accn,' not found'))\n  }\n  return(genome)\n}\nmut <- function(seq,loc,base){\n  Biostrings::subseq(seq,loc,loc) <- base\n  return(seq)\n}\n\nmuts <- function(seq,locs,bases){\n  if (length(locs)!=length(bases)){\n    stop('locs and bases must be same length')\n  }\n  for (i in 1:length(locs)){\n    seq <- mut(seq,locs[i],bases[i])\n  }\n  return(seq)\n}\n\nplot_map <- function(enzymes=c('BsaI','BsmBI'),highlight=NULL,\n                      CoV_Legend.=CoV_Legend,\n                      tree.=tree){\n  \n  BglI <- lapply(CoV_Legend$Accession,digest_genome,\n                 enzymes=enzymes,fragments=FALSE) %>% rbindlist\n  \n  BglI[,rel_position:=position/genome_length]\n  \n  cv=CoV_Legend\n  setkey(cv,Accession)\n  setkey(BglI,Accession)\n  BglI=BglI[cv[,c('Accession','tip.label')]]\n  \n  BglI[,tip.label:=factor(tip.label,levels=tree$tip.label)]\n  \n  ggplot(BglI,aes(tip.label,rel_position))+\n    geom_point(color='grey',cex=2)+\n    geom_point(data=BglI[tip.label==highlight],color='green',cex=4)+\n    coord_flip()+\n    ggtitle(paste0(enzymes,' Sites'))+\n    scale_color_manual(values=c(rep('black',4),'darkgrey'))+\n    scale_fill_manual(values=c(cls,'red',NA))+\n    scale_shape_manual(values=c(21,21,21,21,16))+\n    geom_hline(yintercept = BglI[tip.label==highlight]$rel_position,lty=2)+\n    scale_size_manual(values=c(4,4,4,4,2)) %>%\n    return\n}\n\nsticky_end <- function(re){\n  strsplit(re,'\\\\(')[[1]][2] %>%\n    strsplit('\\\\)') %>% getElement(1) %>%\n    strsplit('/') %>% unlist %>% as.numeric %>%\n    diff %>% abs %>% return()\n}\nsticky_ends <- function(re){\n  if (!grepl('\\\\(',re)){\n    return(0)\n  } else {\n    if (grepl(' ',re)){ ## double digestion\n      re <- strsplit(re,' + ')[[1]][c(1,3)] ## get both re's\n      if(!all(grepl('/',re))){  ##only one RE is type IIs\n        return(0)\n      }\n    }\n    sapply(re,sticky_end) %>% min %>% return()\n  }\n}\n\nclassify_mutations <- function(mutations,orfs,seq,sars2){\n  M <- data.table('site'=as.numeric(rownames(mutations)))\n  M$from <- mutations[,1]\n  M$to <- mutations[,2]\n  M[,ORF:=max(which(orfs$start<site)),by=site]\n  M <- M[!is.infinite(ORF)]\n  M$ORF <- orfs$ORF[M$ORF]\n  setkey(M,ORF)\n  setkey(orfs,ORF)\n  M <- M[orfs]\n  \n  codon_loc <- mod(M$site-M$start,3)\n  \n  M$codon_start <- M$site-codon_loc\n  M$codon_stop <- M$site-codon_loc+2\n  M[!is.na(codon_start),old_codon:=as.character(substr(seq,codon_start,codon_stop)),by=site]\n  M[!is.na(codon_start),new_codon:=as.character(substr(sars2,codon_start,codon_stop)),by=site]\n  M[!is.na(codon_start) & !grepl('-',old_codon) & !grepl('-',new_codon),\n    silent:=GENETIC_CODE[[new_codon]]==GENETIC_CODE[[old_codon]],by=site]\n  return(M)\n}\n\n\nmd <- function(SEQ,mutations=1e3,probs=c('a'=.3,'c'=.29,'g'=.19,'t'=.32),enzymes=c('BsaI','BmsBI')){\n  sites <- sort(sample(nchar(SEQ),mutations,replace=F),decreasing = F)\n  letters <- stringr::str_sub(SEQ,sites,sites)\n  replc <- sample(c('A','T','G','C'),size = mutations,replace=T,prob = probs)\n  ix=which(replc==letters)\n  while(length(ix)>0){\n    replc[ix] <- sample(c('A','T','G','C'),size = length(ix),replace=T,prob = probs)\n    ix <- which(replc==letters)\n  }\n  sq <- SEQ\n  stringi::stri_sub_all(sq,sites,sites) <- replc\n  \n  digest_genome(SEQ=sq) %>% return()\n}\n\nmutate_digest <- function(SEQ,mutations=1e3,reps=1e4,ncores=7,\n                          probs=c('a'=.3,'c'=.29,'g'=.19,'t'=.32),\n                          enzymes=c('BsaI','BsmBI')){\n  \n  rep <- 1:reps\n  cl <- parallel::makeCluster(ncores)\n  clusterEvalQ(cl,library(DECIPHER))\n  clusterEvalQ(cl,library(data.table))\n  clusterEvalQ(cl,library(magrittr))\n  clusterExport(cl,varlist=c('digest_genome','md'))\n  \n  RES=parLapply(cl,rep,fun=function(x,SEQ,mutations,probs,enzymes) md(SEQ,mutations,probs,enzymes),\n         SEQ=SEQ,mutations=mutations,probs=probs,enzymes=enzymes) %>% rbindlist\n  \n  stopCluster(cl)\n  rm('cl')\n  RES[,rep:=1:.N]\n  return(RES)\n}\n\n\n",
    "created" : 1665438497327.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1092014700",
    "id" : "ED29C5E",
    "lastKnownWriteTime" : 1665670062,
    "last_content_update" : 1665670062742,
    "path" : "~/COVID/Origins/RestrictionSites/SARS2_Reverse_Genetics/scripts/utils.R",
    "project_path" : "scripts/utils.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}